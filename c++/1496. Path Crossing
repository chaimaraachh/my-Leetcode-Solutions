#include <vector>
#include <algorithm>
#include <iostream>

class Solution {
public:
    bool isPathCrossing(std::string path) {
        if (path.empty()) {
            return false;
        }

        std::vector<std::vector<int>> v(path.length() + 1, std::vector<int>(2, 0));

        for (int i = 0; i < path.length(); i++) {
            switch (path[i]) {
                case 'N':
                    v[i + 1][1] = v[i][1] + 1;
                    v[i + 1][0] = v[i][0];
                    break;
                case 'S':
                    v[i + 1][1] = v[i][1] - 1;
                    v[i + 1][0] = v[i][0];
                    break;
                case 'E':
                    v[i + 1][0] = v[i][0] + 1;
                    v[i + 1][1] = v[i][1];
                    break;
                case 'W':
                    v[i + 1][0] = v[i][0] - 1;
                    v[i + 1][1] = v[i][1];
                    break;
            }
        }

        std::sort(v.begin(), v.end());

        // Checking for duplicate points
        for (int i = 1; i < v.size(); i++) {
            if (v[i] == v[i - 1]) {
                return true;
            }
        }

        return false;
    }
};
